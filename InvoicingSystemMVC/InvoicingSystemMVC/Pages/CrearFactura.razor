@page "/CrearFactura"
@using InvoicingSystemMVC.Models.Entities
@using InvoicingSystemMVC.Controllers.Api.Services.Interfaces
@using InvoicingSystemMVC.Models.Enums
@using InvoicingSystemMVC.Models.ViewModels.Facturas
@inject IHttpContextAccessor httpContextaccessor
@inject IClienteService ClienteService;
@inject IFacturaService FacturaService;
@inject IContribuyenteService ContribuyenteService;
@inject NavigationManager NavManager


<PageTitle>Nueva Factura</PageTitle>

<h1>Nueva Factura</h1>
<p>@_facturaViewModel.Contribuyente.RFC</p>

    <div class="m-2 p-2">
        <label>Contribuyente:</label>
        <label>@_facturaViewModel.Contribuyente.RFC</label>
        <input type="hidden" @bind="_facturaViewModel.Contribuyente.RFC">
        
        <select @bind="_facturaViewModel.Cliente.RFC">
            @foreach (Cliente cliente in _facturaViewModel.Clientes)
            {
                <option value="@cliente">@cliente.RFC</option>
            }
        </select>
    </div>
<div class="m-2 p-2">
    <label>Tipo de factura:</label>
    <input @bind="_facturaViewModel.TipoDeFactura">
            
    <label>Uso de factura de factura:</label>
    <input @bind="_facturaViewModel.UsoDeFactura">
            
    <label>Moneda:</label>
    <select @bind="@_facturaViewModel.Moneda">
        @foreach (Moneda moneda in Enum.GetValues(typeof(Moneda)))
        {
            <option value="@moneda">@moneda</option>
        }
    </select>
        
      
        
    <label>Forma de Pago:</label>
    <select @bind="@_facturaViewModel.FormaDePago">
        @foreach (FormaDePago formaDePagoa in Enum.GetValues(typeof(FormaDePago)))
        {
            <option value="@formaDePagoa">@formaDePagoa</option>
        }
    </select>
        
            
    <label>Metodo de Pago:</label>
    <select @bind="@_facturaViewModel.MetodoDePago">
        @foreach (MetodoDePago metodoDePago in Enum.GetValues(typeof(MetodoDePago)))
        {
            <option value="@metodoDePago">@metodoDePago</option>
        }
    </select>
        
            
    <label>Serie:</label>
    <input @bind="_facturaViewModel.Serie">
            
    <label>Folio:</label>
    <input @bind="_facturaViewModel.Folio">
            
    <label>Condiciones de Pago:</label>
    <input @bind="_facturaViewModel.CondicionesDePago">
</div>

<!-- Nuevo concepto -->
<div class="m-2 p-2">
    @if (_statusConcepto)
    {
        <label>Clave de Producto o Servicio:</label>
        <input @bind="conceptoViewModel.ClaveDeProductoOServicio">

        <label>Clave de Unidad:</label>
        <input @bind="conceptoViewModel.ClaveDeUnidad">

        <label>Cantidad:</label>
        <input @bind="conceptoViewModel.Cantidad">

        <label>Unidad:</label>
        <input @bind="conceptoViewModel.Unidad">

        <label>Numero de indentificacion:</label>
        <input @bind="conceptoViewModel.NumeroDeIdentificacion">

        <label>Descripcion:</label>
        <input @bind="conceptoViewModel.Descripcion">

        <label>Valor unitario:</label>
        <input @bind="conceptoViewModel.ValorUnitario">
        
        <button class="btn btn-outline-success" onclick="@AddIVA">Agregar IVA</button>
        
        @if (conceptoViewModel.TieneIVA)
        {
            <label>Tasa IVA:</label>
            <input @bind="conceptoViewModel.TasaIVA">
            <button class="btn btn-outline-success" onclick="@RemoveIVA">Cancelar</button>
        }
        <button class="btn btn-outline-success" onclick="@AddNuevoConcepto">Agregar</button>
    }
    else
    {
        <button class="btn btn-outline-success" onclick="@NuevoConcepto">Nuevo Concepto</button>
    }
    
</div>

<div>
    @foreach (ConceptoViewModel concepto in _listaConceptos)
    {
        <p>@concepto.NumeroDeIdentificacion</p>
        <p>@concepto.Descripcion</p>
        <p>@concepto.Cantidad</p>
        <p>@concepto.ValorUnitario</p>
    }
</div>

<div class="m-2 p-2">
    <p>Subtotal Factura:@_facturaViewModel.SubtotalFactura</p>
    <p>Descuento Factura:@_facturaViewModel.DescuentoFactura</p>
    <p>Total IVA:@_facturaViewModel.TotalIVA</p>
    <p>Total Factura:@_facturaViewModel.TotalFactura</p>
</div>

<button class="btn btn-outline-success" onclick="@PostFactura">Crear factura</button>

@code {
    private CrearFacturaViewModel _facturaViewModel = new CrearFacturaViewModel();
    private List<ConceptoViewModel> _listaConceptos = new List<ConceptoViewModel>();
    private ConceptoViewModel conceptoViewModel = new ConceptoViewModel();
    private bool _statusConcepto = false;
    
    private string GetRFCFromCookies()
    {
        string RFC = "";
        foreach (var cookie in httpContextaccessor.HttpContext.Request.Cookies)
        {
            if (cookie.Key.Equals("RFC"))
            {
                RFC = cookie.Value;
                break;
            }
        }
        return RFC;
    }

    private async Task<Contribuyente> getContribuyente(string RFC)
    {
        Contribuyente myContribuyente = await ContribuyenteService.GetContribuyente(RFC);
        return myContribuyente;
    }

    private async Task<List<Cliente>> getClientes()
    {
        List<Cliente> myClientes = await ClienteService.GetClientes();
        return myClientes;
    }

    protected override async Task OnInitializedAsync()
    {
        string RFC = GetRFCFromCookies();
        _facturaViewModel.Contribuyente = await getContribuyente(RFC);
        _facturaViewModel.Clientes = await getClientes();
        
    }
    private void NuevoConcepto()
    {
        _statusConcepto = true;
    }
    
    private void AddNuevoConcepto()
    {
        if (conceptoViewModel.TieneIVA)
        {
            conceptoViewModel.SubtotalConcepto=(conceptoViewModel.Cantidad) * (conceptoViewModel.ValorUnitario);
            conceptoViewModel.TotalIVA= (conceptoViewModel.SubtotalConcepto * conceptoViewModel.TasaIVA) / 100;
            conceptoViewModel.TotalConcepto=conceptoViewModel.SubtotalConcepto+conceptoViewModel.TotalIVA;
        }
        else
        {
            conceptoViewModel.TotalConcepto=conceptoViewModel.SubtotalConcepto=(conceptoViewModel.Cantidad) * (conceptoViewModel.ValorUnitario);
        }
        _listaConceptos.Add(conceptoViewModel);
        conceptoViewModel = new ConceptoViewModel();
        CalcularTotal();
        _statusConcepto = false;
    }
    
    private void AddIVA()
    {
        conceptoViewModel.TieneIVA = true;
    }
    private void RemoveIVA()
    {
        conceptoViewModel.TieneIVA = false;
    }

    private void CalcularTotal()
    {
        ConceptoViewModel concepto =_listaConceptos[_listaConceptos.Count()-1];
        if (concepto.TieneIVA)
        {
            _facturaViewModel.SubtotalFactura=_facturaViewModel.SubtotalFactura+concepto.SubtotalConcepto;
            _facturaViewModel.TotalIVA=_facturaViewModel.TotalIVA+concepto.TotalIVA;
            _facturaViewModel.TotalFactura=_facturaViewModel.TotalFactura+concepto.TotalConcepto;
        }
        else
        {
            _facturaViewModel.SubtotalFactura+=concepto.SubtotalConcepto; 
            _facturaViewModel.TotalFactura+=concepto.TotalConcepto;
        }
    }
    
    private async void PostFactura()
    {
        Console.WriteLine("Dentro de post");
        var post = await FacturaService.PostFactura(_facturaViewModel);
        Console.WriteLine("post: --------------------------------------------------------------"+post);
        NavManager.NavigateTo("/Cliente");
    }
}